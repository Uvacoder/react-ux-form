{"version":3,"file":"index.eb7e52d2.js","sources":["../../vite/modulepreload-polyfill","../../src/components/Link.tsx","../../src/components/Input.tsx","../../src/components/Page.tsx","../../src/utils/promises.ts","../../src/forms/AsyncSubmissionForm.tsx","../../src/forms/AsyncValidationForm.tsx","../../src/forms/BasicForm.tsx","../../src/forms/CheckboxesForm.tsx","../../src/forms/CreditCardForm.tsx","../../src/forms/FieldsListenerForm.tsx","../../src/forms/IBANForm.tsx","../../src/forms/InputMaskingForm.tsx","../../src/forms/StrategiesForm.tsx","../../src/App.tsx","../../src/index.tsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","import { useTheme } from \"@chakra-ui/system\";\nimport * as React from \"react\";\nimport { Link as WouterLink, LinkProps, useRoute } from \"wouter\";\n\nexport const Link = (props: LinkProps & { href: string }) => {\n  const { colors } = useTheme();\n  const [active] = useRoute(props.href);\n\n  return (\n    <WouterLink\n      {...props}\n      style={{\n        borderRadius: 4,\n        color: colors.gray[600],\n        display: \"flex\",\n        flexGrow: 1,\n        fontWeight: 500,\n        paddingBottom: 5,\n        paddingLeft: 12,\n        paddingRight: 12,\n        paddingTop: 5,\n        ...(active && {\n          backgroundColor: colors.green[100],\n          color: colors.green[700],\n        }),\n      }}\n    />\n  );\n};\n","import { FormLabel } from \"@chakra-ui/form-control\";\nimport { useId } from \"@chakra-ui/hooks\";\nimport { CheckIcon, WarningIcon } from \"@chakra-ui/icons\";\nimport { Input as ChakraInput, InputGroup, InputProps, InputRightElement } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport * as React from \"react\";\n\ntype Props = {\n  error?: string;\n  label: string;\n  onBlur: () => void;\n  onChange?: InputProps[\"onChange\"];\n  onChangeText?: (text: string) => void;\n  valid: boolean;\n  validating: boolean;\n  value: string;\n};\n\nexport const Input = React.forwardRef<HTMLInputElement, Props>(\n  ({ error, label, onBlur, onChange, onChangeText, valid, validating, value }, forwardedRef) => {\n    const id = useId();\n\n    return (\n      <Box>\n        <FormLabel htmlFor={id}>{label}</FormLabel>\n\n        <InputGroup>\n          <ChakraInput\n            id={id}\n            ref={forwardedRef}\n            error={error}\n            onBlur={onBlur}\n            value={value}\n            isInvalid={error != null}\n            onChange={(e) => {\n              onChange?.(e);\n              onChangeText?.(e.target.value);\n            }}\n          />\n\n          {valid && (\n            <InputRightElement>\n              <CheckIcon color=\"green.500\" />\n            </InputRightElement>\n          )}\n\n          {validating && (\n            <InputRightElement>\n              <Spinner color=\"blue.500\" size=\"sm\" />\n            </InputRightElement>\n          )}\n\n          {error != null && (\n            <InputRightElement>\n              <WarningIcon color=\"red.500\" />\n            </InputRightElement>\n          )}\n        </InputGroup>\n\n        <Box height={8}>\n          {error != null && (\n            <Text color=\"red.500\" fontWeight={500}>\n              {error}\n            </Text>\n          )}\n        </Box>\n      </Box>\n    );\n  },\n);\n","import { Box, Flex, Heading } from \"@chakra-ui/layout\";\nimport * as React from \"react\";\n\nexport const Page = ({ children, title }: { children: React.ReactNode; title: string }) => (\n  <Flex\n    flexDirection=\"column\"\n    flexGrow={1}\n    flexShrink={1}\n    overflowY=\"scroll\"\n    paddingTop={{ base: 6, md: 8 }}\n    paddingBottom={{ base: 6, md: 8 }}\n    paddingLeft={{ base: 5, md: 10 }}\n    paddingRight={{ base: 5, md: 10 }}\n  >\n    <main style={{ maxWidth: 500 }}>\n      <Heading>{title}</Heading>\n      <Box height={8} />\n      {children}\n    </main>\n  </Flex>\n);\n","export const resolveAfter = <T>(delay: number, value?: T): Promise<T | void> =>\n  new Promise((resolve) => {\n    setTimeout(() => resolve(value), delay);\n  });\n\nexport const rejectAfter = <T>(delay: number, value?: T): Promise<T | void> =>\n  new Promise((_, reject) => {\n    setTimeout(() => reject(value), delay);\n  });\n","import { Button } from \"@chakra-ui/button\";\nimport { Box, HStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport validator from \"validator\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\nimport { resolveAfter } from \"../utils/promises\";\n\nexport const AsyncSubmissionForm = () => {\n  const { Field, resetForm, submitForm, formStatus } = useForm({\n    emailAddress: {\n      strategy: \"onFirstSuccessOrFirstBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!validator.isEmail(value)) {\n          return \"A valid email is required\";\n        }\n      },\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) =>\n        resolveAfter(2000).then(() => {\n          console.log(\"values\", values);\n\n          toast({\n            title: \"Submission succeeded\",\n            status: \"success\",\n            duration: 5000,\n            isClosable: true,\n          });\n        }),\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page title=\"Async submission\">\n      <form onSubmit={onSubmit}>\n        <Field name=\"emailAddress\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Email address\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Box height={4} />\n\n        <HStack spacing={3}>\n          <Button onClick={resetForm}>Reset</Button>\n\n          <Button\n            colorScheme=\"green\"\n            disabled={formStatus === \"submitting\"}\n            isLoading={formStatus === \"submitting\"}\n            type=\"submit\"\n            onClick={onSubmit}\n          >\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { Box, HStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport validator from \"validator\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\nimport { resolveAfter } from \"../utils/promises\";\n\nexport const AsyncValidationForm = () => {\n  const { Field, resetForm, submitForm } = useForm({\n    emailAddress: {\n      strategy: \"onFirstChange\",\n      initialValue: \"\",\n      debounceInterval: 250,\n      sanitize: (value) => value.trim(),\n      validate: (value) =>\n        resolveAfter(1000, !validator.isEmail(value) ? \"A valid email is required\" : undefined),\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page title=\"Async validation\">\n      <form onSubmit={onSubmit}>\n        <Field name=\"emailAddress\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Email address\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Box height={4} />\n\n        <HStack spacing={3}>\n          <Button onClick={resetForm}>Reset</Button>\n\n          <Button colorScheme=\"green\" onClick={onSubmit} type=\"submit\">\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { Box, HStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport validator from \"validator\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\n\nexport const BasicForm = () => {\n  const { Field, resetForm, submitForm } = useForm({\n    firstName: {\n      strategy: \"onFirstBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (value === \"\") {\n          return \"First name is required\";\n        }\n      },\n    },\n    lastName: {\n      strategy: \"onFirstBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (value === \"\") {\n          return \"Last name is required\";\n        }\n      },\n    },\n    emailAddress: {\n      strategy: \"onFirstSuccessOrFirstBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!validator.isEmail(value)) {\n          return \"A valid email is required\";\n        }\n      },\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page title=\"Basic\">\n      <form onSubmit={onSubmit}>\n        <Field name=\"firstName\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"First name\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"lastName\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Last name\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"emailAddress\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Email address\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Box height={4} />\n\n        <HStack spacing={3}>\n          <Button onClick={resetForm}>Reset</Button>\n\n          <Button colorScheme=\"green\" onClick={onSubmit} type=\"submit\">\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { Checkbox } from \"@chakra-ui/checkbox\";\nimport { Box, HStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport { Page } from \"../components/Page\";\n\nexport const CheckboxesForm = () => {\n  const { Field, resetForm, submitForm } = useForm({\n    termsAndConditions: {\n      strategy: \"onFirstChange\",\n      initialValue: false,\n      validate: (value) => {\n        if (!value) {\n          return \"You must accept terms and conditions\";\n        }\n      },\n    },\n    emailsFromPartners: {\n      strategy: \"onFirstChange\",\n      initialValue: false,\n      validate: (value) => {\n        if (!value) {\n          return \"You must accept to receive email from partners\";\n        }\n      },\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page title=\"Checkboxes\">\n      <form onSubmit={onSubmit}>\n        <Field name=\"termsAndConditions\">\n          {({ error, onChange, value }) => (\n            <Checkbox\n              display=\"flex\"\n              isInvalid={error != null}\n              isChecked={value}\n              onChange={(e) => onChange(e.target.checked)}\n            >\n              Accept terms and conditions\n            </Checkbox>\n          )}\n        </Field>\n\n        <Box height={1} />\n\n        <Field name=\"emailsFromPartners\">\n          {({ error, onChange, value }) => (\n            <Checkbox\n              display=\"flex\"\n              isInvalid={error != null}\n              isChecked={value}\n              onChange={(e) => onChange(e.target.checked)}\n            >\n              Receive emails from partners\n            </Checkbox>\n          )}\n        </Field>\n\n        <Box height={4} />\n\n        <HStack spacing={3}>\n          <Button onClick={resetForm}>Reset</Button>\n\n          <Button colorScheme=\"green\" onClick={onSubmit} type=\"submit\">\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { Box, HStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport cardValidator from \"card-validator\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\n\nexport const CreditCardForm = () => {\n  const { Field, resetForm, submitForm } = useForm({\n    cardNumber: {\n      strategy: \"onFirstSuccessOrFirstBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!cardValidator.number(value).isValid) {\n          return \"Card number is invalid\";\n        }\n      },\n    },\n    expirationDate: {\n      strategy: \"onFirstSuccessOrFirstBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!cardValidator.expirationDate(value).isValid) {\n          return \"Expiration date is invalid\";\n        }\n      },\n    },\n    cvc: {\n      strategy: \"onFirstSuccessOrFirstBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!cardValidator.cvv(value).isValid) {\n          return \"CVC should have 3 characters\";\n        }\n      },\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page title=\"Credit card\">\n      <form onSubmit={onSubmit}>\n        <Field name=\"cardNumber\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Card number\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"expirationDate\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Expiration date\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"cvc\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"CVC\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Box height={4} />\n\n        <HStack spacing={3}>\n          <Button onClick={resetForm}>Reset</Button>\n\n          <Button colorScheme=\"green\" onClick={onSubmit} type=\"submit\">\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { Box, HStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport validator from \"validator\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\n\nexport const FieldsListenerForm = () => {\n  const { Field, FieldsListener, resetForm, submitForm } = useForm({\n    firstName: {\n      strategy: \"onFirstBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (value === \"\") {\n          return \"First name is required\";\n        }\n      },\n    },\n    lastName: {\n      strategy: \"onFirstBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (value === \"\") {\n          return \"Last name is required\";\n        }\n      },\n    },\n    emailAddress: {\n      strategy: \"onFirstSuccessOrFirstBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!validator.isEmail(value)) {\n          return \"A valid email is required\";\n        }\n      },\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page title=\"Fields listener\">\n      <FieldsListener names={[\"firstName\", \"lastName\", \"emailAddress\"]}>\n        {(states) => (\n          <pre\n            style={{\n              backgroundColor: \"#fafafa\",\n              borderRadius: 6,\n              borderWidth: 1,\n              fontSize: 14,\n              padding: 12,\n            }}\n          >\n            {JSON.stringify(states, null, 2)}\n          </pre>\n        )}\n      </FieldsListener>\n\n      <Box height={4} />\n\n      <form onSubmit={onSubmit}>\n        <Field name=\"firstName\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"First name\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"lastName\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Last name\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"emailAddress\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"Email address\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Box height={4} />\n\n        <HStack spacing={3}>\n          <Button onClick={resetForm}>Reset</Button>\n\n          <Button colorScheme=\"green\" onClick={onSubmit} type=\"submit\">\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { Box, HStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport validator from \"validator\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\n\nexport const IBANForm = () => {\n  const { Field, resetForm, submitForm } = useForm({\n    iban: {\n      strategy: \"onFirstSuccessOrFirstBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!validator.isIBAN(value)) {\n          return \"Value is not a valid IBAN\";\n        }\n      },\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page title=\"IBAN\">\n      <form onSubmit={onSubmit}>\n        <Field name=\"iban\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"IBAN\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Box height={4} />\n\n        <HStack spacing={3}>\n          <Button onClick={resetForm}>Reset</Button>\n\n          <Button colorScheme=\"green\" onClick={onSubmit} type=\"submit\">\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { Box, HStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport cardValidator from \"card-validator\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport { Rifm } from \"rifm\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\n\nconst formatCardNumber = (string: string) => {\n  const digits = (string.match(/\\d+/g) || []).join(\"\");\n  const chars = digits.split(\"\");\n\n  const res = chars\n    .reduce(\n      (acc, char, index) => ([4, 8, 12, 16].includes(index) ? `${acc} ${char}` : `${acc}${char}`),\n      \"\",\n    )\n    .substr(0, 19);\n\n  return string.endsWith(\" \") && [4, 9, 14, 19].includes(res.length) ? `${res} ` : res;\n};\n\nconst appendSpace = (res: string) => ([4, 9, 14].includes(res.length) ? `${res} ` : res);\n\nexport const InputMaskingForm = () => {\n  const { Field, resetForm, submitForm } = useForm({\n    cardNumber: {\n      strategy: \"onFirstSuccessOrFirstBlur\",\n      initialValue: \"\",\n      sanitize: (value) => value.trim(),\n      validate: (value) => {\n        if (!cardValidator.number(value).isValid) {\n          return \"Card number is invalid\";\n        }\n      },\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page title=\"Input masking\">\n      <form onSubmit={onSubmit}>\n        <Field name=\"cardNumber\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Rifm\n              accept={/\\d+/g}\n              mask={19 <= value.length}\n              format={formatCardNumber}\n              value={value}\n              onChange={onChange}\n              append={appendSpace}\n            >\n              {({ value, onChange }) => (\n                <Input\n                  label=\"Card number\"\n                  error={error}\n                  onBlur={onBlur}\n                  onChange={onChange}\n                  ref={ref}\n                  valid={valid}\n                  validating={validating}\n                  value={value}\n                />\n              )}\n            </Rifm>\n          )}\n        </Field>\n\n        <Box height={4} />\n\n        <HStack spacing={3}>\n          <Button onClick={resetForm}>Reset</Button>\n\n          <Button colorScheme=\"green\" onClick={onSubmit} type=\"submit\">\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Button } from \"@chakra-ui/button\";\nimport { Box, HStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport * as React from \"react\";\nimport { useForm } from \"react-ux-form\";\nimport { Input } from \"../components/Input\";\nimport { Page } from \"../components/Page\";\n\nconst sanitize = (value: string) => value.trim();\nconst validate = (value: string) => {\n  if (value.length < 3) {\n    return \"Must be at least 3 characters\";\n  }\n};\n\nexport const StrategiesForm = () => {\n  const { Field, resetForm, submitForm } = useForm({\n    onFirstChange: {\n      strategy: \"onFirstChange\",\n      initialValue: \"\",\n      sanitize,\n      validate,\n    },\n    onFirstSuccess: {\n      strategy: \"onFirstSuccess\",\n      initialValue: \"\",\n      sanitize,\n      validate,\n    },\n    onFirstBlur: {\n      strategy: \"onFirstBlur\",\n      initialValue: \"\",\n      sanitize,\n      validate,\n    },\n    onFirstSuccessOrFirstBlur: {\n      strategy: \"onFirstSuccessOrFirstBlur\",\n      initialValue: \"\",\n      sanitize,\n      validate,\n    },\n    onSubmit: {\n      strategy: \"onSubmit\",\n      initialValue: \"\",\n      sanitize,\n      validate,\n    },\n  });\n\n  const toast = useToast();\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    submitForm(\n      (values) => {\n        console.log(\"values\", values);\n\n        toast({\n          title: \"Submission succeeded\",\n          status: \"success\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n      (errors) => {\n        console.log(\"errors\", errors);\n\n        toast({\n          title: \"Submission failed\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n        });\n      },\n    );\n  };\n\n  return (\n    <Page title=\"Validation strategies\">\n      <form onSubmit={onSubmit}>\n        <Field name=\"onFirstChange\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"onFirstChange\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"onFirstSuccess\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"onFirstSuccess\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"onFirstBlur\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"onFirstBlur\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"onFirstSuccessOrFirstBlur\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"onFirstSuccessOrFirstBlur (default)\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Field name=\"onSubmit\">\n          {({ error, onBlur, onChange, ref, valid, validating, value }) => (\n            <Input\n              label=\"onSubmit\"\n              error={error}\n              onBlur={onBlur}\n              onChangeText={onChange}\n              ref={ref}\n              valid={valid}\n              validating={validating}\n              value={value}\n            />\n          )}\n        </Field>\n\n        <Box height={4} />\n\n        <HStack spacing={3}>\n          <Button onClick={resetForm}>Reset</Button>\n\n          <Button colorScheme=\"green\" onClick={onSubmit} type=\"submit\">\n            Submit\n          </Button>\n        </HStack>\n      </form>\n    </Page>\n  );\n};\n","import { Box, Flex, Text, VStack } from \"@chakra-ui/layout\";\nimport * as React from \"react\";\nimport { Route, Router } from \"wouter\";\nimport { Link } from \"./components/Link\";\nimport { AsyncSubmissionForm } from \"./forms/AsyncSubmissionForm\";\nimport { AsyncValidationForm } from \"./forms/AsyncValidationForm\";\nimport { BasicForm } from \"./forms/BasicForm\";\nimport { CheckboxesForm } from \"./forms/CheckboxesForm\";\nimport { CreditCardForm } from \"./forms/CreditCardForm\";\nimport { FieldsListenerForm } from \"./forms/FieldsListenerForm\";\nimport { IBANForm } from \"./forms/IBANForm\";\nimport { InputMaskingForm } from \"./forms/InputMaskingForm\";\nimport { StrategiesForm } from \"./forms/StrategiesForm\";\n\nexport const App = () => (\n  <Router base=\"/react-ux-form\">\n    <Flex flex={1} flexDirection={{ base: \"column\", md: \"row\" }}>\n      <Flex\n        backgroundColor=\"gray.50\"\n        flexDirection=\"column\"\n        overflowY=\"scroll\"\n        paddingTop={6}\n        paddingBottom={6}\n        paddingLeft={4}\n        paddingRight={4}\n        borderColor=\"gray.100\"\n        borderStyle=\"solid\"\n        borderBottomWidth={1}\n        flexShrink={0}\n        height={{ base: 175, md: \"auto\" }}\n        width={{ base: \"auto\", md: 300 }}\n      >\n        <Text\n          color=\"gray.500\"\n          fontSize={12}\n          fontWeight={600}\n          marginLeft={3}\n          textTransform=\"uppercase\"\n        >\n          Examples\n        </Text>\n\n        <Box height={3} />\n\n        <VStack align=\"initial\" spacing={1}>\n          <Link href=\"/\">Basic</Link>\n          <Link href=\"/strategies\">Validation strategies</Link>\n          <Link href=\"/async-validation\">Async validation</Link>\n          <Link href=\"/async-submission\">Async submission</Link>\n          <Link href=\"/checkboxes\">Checkboxes</Link>\n          <Link href=\"/fields-listener\">Fields listener</Link>\n          <Link href=\"/iban\">IBAN</Link>\n          <Link href=\"/credit-card\">Credit card</Link>\n          <Link href=\"/input-masking\">Input masking</Link>\n        </VStack>\n      </Flex>\n\n      <Route path=\"/\" component={BasicForm} />\n      <Route path=\"/strategies\" component={StrategiesForm} />\n      <Route path=\"/async-validation\" component={AsyncValidationForm} />\n      <Route path=\"/async-submission\" component={AsyncSubmissionForm} />\n      <Route path=\"/checkboxes\" component={CheckboxesForm} />\n      <Route path=\"/fields-listener\" component={FieldsListenerForm} />\n      <Route path=\"/iban\" component={IBANForm} />\n      <Route path=\"/credit-card\" component={CreditCardForm} />\n      <Route path=\"/input-masking\" component={InputMaskingForm} />\n    </Flex>\n  </Router>\n);\n","import { ChakraProvider } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <App />\n  </ChakraProvider>,\n  document.getElementById(\"root\"),\n);\n"],"names":["relList","document","createElement","supports","link","querySelectorAll","MutationObserver","mutations","mutation","type","node","addedNodes","tagName","rel","observe","childList","subtree","ep","fetchOpts","script","integrity","referrerpolicy","referrerPolicy","crossorigin","credentials","getFetchOpts","href","p","Link","props","colors","useTheme","active","useRoute","WouterLink","style","__spreadValues","borderRadius","color","gray","display","flexGrow","fontWeight","paddingBottom","paddingLeft","paddingRight","paddingTop","backgroundColor","green","Input","React.forwardRef","error","label","onBlur","onChange","onChangeText","valid","validating","value","forwardedRef","id","useId","Box","FormLabel","htmlFor","InputGroup","ChakraInput","ref","isInvalid","e","target","InputRightElement","CheckIcon","Spinner","size","WarningIcon","height","Text","Page","children","title","Flex","flexDirection","flexShrink","overflowY","base","md","maxWidth","Heading","resolveAfter","delay","Promise","resolve","AsyncSubmissionForm","Field","resetForm","submitForm","formStatus","useForm","emailAddress","strategy","initialValue","sanitize","trim","validate","validator","isEmail","toast","useToast","onSubmit","event","preventDefault","values","then","log","status","duration","isClosable","errors","name","HStack","spacing","Button","onClick","colorScheme","disabled","isLoading","AsyncValidationForm","debounceInterval","BasicForm","firstName","lastName","CheckboxesForm","termsAndConditions","emailsFromPartners","Checkbox","isChecked","checked","CreditCardForm","cardNumber","cardValidator","number","isValid","expirationDate","cvc","cvv","FieldsListenerForm","FieldsListener","names","states","borderWidth","fontSize","padding","JSON","stringify","IBANForm","iban","isIBAN","formatCardNumber","string","res","match","join","split","reduce","acc","char","index","includes","substr","endsWith","length","appendSpace","InputMaskingForm","Rifm","accept","mask","format","append","onChange2","value2","StrategiesForm","onFirstChange","onFirstSuccess","onFirstBlur","onFirstSuccessOrFirstBlur","App","Router","flex","borderColor","borderStyle","borderBottomWidth","width","marginLeft","textTransform","VStack","align","Route","path","component","ReactDOM.render","ChakraProvider","getElementById"],"mappings":"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"}